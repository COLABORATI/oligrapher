// Generated by CoffeeScript 1.6.2
(function() {
  var LittlesisApi, Netmap;

  LittlesisApi = (function() {
    function LittlesisApi(key) {
      this.key = key;
      this.base_url = "http://api.littlesis.org/";
    }

    LittlesisApi.prototype.entities_and_rels_url = function(entity_ids) {
      return this.base_url + "map/entities.json?entity_ids=" + entity_ids.join(",") + "&_key=" + this.key;
    };

    LittlesisApi.prototype.entities_and_rels = function(entity_ids, callback) {
      return $.ajax({
        url: this.entities_and_rels_url(entity_ids),
        success: callback,
        error: function() {
          return alert("There was an error retrieving data from the API");
        },
        dataType: "json"
      });
    };

    LittlesisApi.prototype.get_add_entity_data = function(entity_id, entity_ids, callback) {
      return $.ajax({
        url: this.base_url + "map/addEntityData.json",
        data: {
          "entity_id": entity_id,
          "entity_ids": entity_ids
        },
        success: callback,
        error: function() {
          return alert("There was an error retrieving data from the API");
        },
        type: "GET",
        dataType: "json"
      });
    };

    LittlesisApi.prototype.get_add_related_entities_data = function(entity_id, num, entity_ids, rel_ids, include_cats, callback) {
      if (include_cats == null) {
        include_cats = [];
      }
      return $.ajax({
        url: this.base_url + "map/addRelatedEntitiesData.json",
        data: {
          "entity_id": entity_id,
          "num": num,
          "entity_ids": entity_ids,
          "rel_ids": rel_ids,
          "include_cat_ids": include_cats
        },
        success: callback,
        error: function() {
          return alert("There was an error retrieving data from the API");
        },
        type: "GET",
        dataType: "json"
      });
    };

    LittlesisApi.prototype.search_entities = function(q, callback) {
      return $.ajax({
        url: this.base_url + "map/searchEntities.json",
        data: {
          "q": q
        },
        success: callback,
        error: function() {
          return alert("There was an error retrieving data from the API");
        },
        type: "GET",
        dataType: "json"
      });
    };

    LittlesisApi.prototype.create_map = function(width, height, user_id, out_data, callback) {
      return $.ajax({
        url: this.base_url + "map.json",
        data: {
          "width": width,
          "height": height,
          "user_id": user_id,
          "data": JSON.stringify(out_data)
        },
        success: callback,
        error: function() {
          return alert("There was an error sending data to the API");
        },
        type: "POST",
        dataType: "json"
      });
    };

    LittlesisApi.prototype.get_map = function(id, callback) {
      return $.ajax({
        url: this.base_url + ("map/" + id + ".json"),
        success: callback,
        error: function() {
          return alert("There was an error retrieving data from the API");
        },
        dataType: "json"
      });
    };

    LittlesisApi.prototype.update_map = function(id, width, height, out_data, callback) {
      return $.ajax({
        url: this.base_url + ("map/" + id + "/update.json"),
        data: {
          "width": width,
          "height": height,
          "data": JSON.stringify(out_data)
        },
        success: callback,
        error: function() {
          return alert("There was an error sending data to the API");
        },
        type: "POST",
        dataType: "json"
      });
    };

    return LittlesisApi;

  })();

  Netmap = (function() {
    function Netmap(width, height, parent_selector, key, clean_mode) {
      if (clean_mode == null) {
        clean_mode = true;
      }
      this.width = width;
      this.height = height;
      this.min_zoom = 0.5;
      this.max_zoom = 2;
      this.parent_selector = parent_selector;
      this.clean_mode = clean_mode;
      this.init_svg();
      this.force_enabled = false;
      this.entity_background_opacity = 0.6;
      this.entity_background_color = "#fff";
      this.entity_background_corner_radius = 5;
      this.distance = 200;
      this.api = new LittlesisApi(key);
      this.init_callbacks();
      this.current_only = false;
    }

    Netmap.prototype.init_svg = function() {
      var defs, marker1, marker2, t, zoom, zoom_func;

      this.svg = d3.select(this.parent_selector).append("svg").attr("version", "1.1").attr("xmlns", "http://www.w3.org/2000/svg").attr("xmlns:xmlns:xlink", "http://www.w3.org/1999/xlink").attr("id", "svg").attr("width", this.width != null ? this.width : "100%").attr("height", this.height != null ? this.height : "100%");
      zoom = this.svg.append('g').attr("id", "zoom").attr("fill", "#ffe");
      if (!this.clean_mode) {
        zoom.append('line').attr('x1', -8).attr('y1', 0).attr('x2', 8).attr('y2', 0).attr('stroke', '#ccc');
        zoom.append('line').attr('x1', 0).attr('y1', -8).attr('x2', 0).attr('y2', 8).attr('stroke', '#ccc');
      }
      marker1 = this.svg.append("marker").attr("id", "marker1").attr("viewBox", "0 -5 10 10").attr("refX", 8).attr("refY", 0).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M0,-5L10,0L0,5");
      marker2 = this.svg.append("marker").attr("id", "marker2").attr("viewBox", "-10 -5 10 10").attr("refX", -8).attr("refY", 0).attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", "auto").append("path").attr("d", "M0,-5L-10,0L0,5");
      defs = this.svg.append("defs");
      this.zoom = d3.behavior.zoom();
      this.zoom.scaleExtent([this.min_zoom, this.max_zoom]);
      t = this;
      zoom_func = function() {
        var scale, trans;

        t.update_zoom();
        trans = d3.event.translate;
        scale = d3.event.scale;
        return zoom.attr("transform", "translate(" + trans + ")" + " scale(" + scale + ")");
      };
      return this.svg.call(this.zoom.on("zoom", zoom_func));
    };

    Netmap.prototype.compute_graph_center = function() {
      var entities, xs, ys;

      entities = this.entities();
      xs = entities.map(function(e) {
        if (e.x) {
          return e.x;
        } else {
          return 0;
        }
      });
      ys = entities.map(function(e) {
        if (e.y) {
          return e.y;
        } else {
          return 0;
        }
      });
      return {
        x: (Math.min.apply(null, xs) + Math.max.apply(null, xs)) / 2,
        y: (Math.min.apply(null, ys) + Math.max.apply(null, ys)) / 2
      };
    };

    Netmap.prototype.svg_size = function() {
      return {
        x: $('#svg').width(),
        y: $('#svg').height()
      };
    };

    Netmap.prototype.svg_center = function() {
      var size;

      size = this.svg_size();
      return {
        x: Math.floor(size.x / 2),
        y: Math.floor(size.y / 2)
      };
    };

    Netmap.prototype.auto_center = function(x, y) {
      var center, dx, dy, graph_center, shift, svg_center;

      if (x == null) {
        x = true;
      }
      if (y == null) {
        y = true;
      }
      if (this.centered_coordinates()) {
        center = this.svg_center();
        return this.zoom.translate([center.x, center.y]);
      } else {
        graph_center = this.compute_graph_center();
        svg_center = this.svg_center();
        shift = this.zoom.translate();
        dx = x ? svg_center.x - graph_center.x - shift[0] : 0;
        dy = y ? svg_center.y - graph_center.y - shift[1] : 0;
        return this.shift_map(dx, dy);
      }
    };

    Netmap.prototype.recenter = function() {
      var shift;

      shift = this.compute_graph_center();
      this._data.entities = this._data.entities.map(function(e) {
        e.x += -shift.x;
        e.y += -shift.y;
        return e;
      });
      this._data.texts = this._data.texts.map(function(t) {
        t.x += -shift.x;
        t.y += -shift.y;
        return t;
      });
      return this.build();
    };

    Netmap.prototype.shift_map = function(dx, dy) {
      if (dx == null) {
        dx = 0;
      }
      if (dy == null) {
        dy = 0;
      }
      this.zoom.translate([this.zoom.translate()[0] + dx, this.zoom.translate()[1] + dy]);
      return this.update_zoom();
    };

    Netmap.prototype.zoom_by = function(scale) {
      var centered, new_scale, svg_size, x_diff, y_diff;

      centered = this.centered_coordinates();
      svg_size = this.svg_size();
      new_scale = this.zoom.scale() * scale;
      if (new_scale < 0.5) {
        new_scale = 0.5;
      }
      if (new_scale > 2) {
        new_scale = 2;
      }
      x_diff = (centered ? 0 : (new_scale - this.zoom.scale()) * svg_size.x);
      y_diff = (centered ? 0 : (new_scale - this.zoom.scale()) * svg_size.y);
      this.zoom.scale(new_scale);
      this.zoom.translate([this.zoom.translate()[0] - x_diff / 2, this.zoom.translate()[1] - y_diff / 2]);
      return this.update_zoom();
    };

    Netmap.prototype.round_scale = function() {
      return this.zoom.scale(Math.round(this.zoom.scale() * 1000) / 1000);
    };

    Netmap.prototype.update_zoom = function() {
      this.round_scale();
      return d3.select("#zoom").attr("transform", "translate(" + this.zoom.translate() + ") scale(" + this.zoom.scale() + ")");
    };

    Netmap.prototype.reset_zoom = function() {
      this.zoom.scale(1);
      this.auto_center();
      return this.update_zoom();
    };

    Netmap.prototype.set_translate = function(x, y) {
      this.zoom.translate([x, y]);
      return this.update_zoom();
    };

    Netmap.prototype.set_translate_x = function(x) {
      this.zoom.translate([x, this.zoom.translate()[1]]);
      return this.update_zoom();
    };

    Netmap.prototype.set_translate_y = function(y) {
      this.zoom.translate([this.zoom.translate()[0], y]);
      return this.update_zoom();
    };

    Netmap.prototype.get_scale = function() {
      return this.zoom.scale();
    };

    Netmap.prototype.get_translate = function() {
      return this.zoom.translate();
    };

    Netmap.prototype.init_callbacks = function() {
      var t;

      t = this;
      $(window).on("mousemove", function(e) {
        t.mouse_x = e.pageX;
        return t.mouse_y = e.pageY;
      });
      this.keymap = {};
      $(document).on("keyup", function(e) {
        return t.keymap[e.keyCode] = false;
      });
      return $(document).on("keydown", function(e) {
        var d, data, rebuild, selected, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;

        t.keymap[e.keyCode] = true;
        if (!t.clean_mode) {
          if (e.ctrlKey) {
            if (t.keymap[8] || t.keymap[46] || t.keymap[68] || t.keymap[100]) {
              rebuild = false;
              selected = $(".selected").length > 0;
              _ref = d3.selectAll($(".rel.selected")).data();
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                d = _ref[_i];
                t.remove_rel(d.id);
                rebuild = true;
              }
              _ref1 = d3.selectAll($(".entity.selected")).data();
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                d = _ref1[_j];
                t.remove_entity(d.id);
                rebuild = true;
              }
              _ref2 = d3.selectAll($(".text.selected")).data();
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                d = _ref2[_k];
                t.remove_text(d.id);
                rebuild = true;
              }
              if (rebuild) {
                t.build();
              }
              if (selected) {
                $(window).trigger('selection');
              }
              if (selected) {
                e.preventDefault();
              }
            }
            if (t.keymap[78] || t.keymap[110]) {
              if ($(t.parent_selector + ":hover").length > 0) {
                $(window).trigger('toggle_add_node_form');
              }
            }
            if (t.keymap[69] || t.keymap[101]) {
              if ($(t.parent_selector + ':hover').length > 0) {
                data = d3.selectAll('.entity.selected').data();
                if (data.length > 0) {
                  $(window).trigger('toggle_add_edge_form', data[0]);
                }
              }
            }
            if (t.keymap[82] || t.keymap[114]) {
              if ($(t.parent_selector + ':hover').length > 0) {
                data = d3.selectAll('.entity.selected').data();
                if (data.length > 0) {
                  t.toggle_add_related_entities_form(data[0].id);
                }
              }
            }
            if (t.keymap[84] || t.keymap[116]) {
              if ($(t.parent_selector + ":hover").length > 0) {
                $(window).trigger('toggle_add_text_form');
              }
            }
            if (t.keymap[61] || t.keymap[187]) {
              t.zoom_by(1.2);
            }
            if (t.keymap[173] || t.keymap[189]) {
              t.zoom_by(0.83333333333333);
            }
            if (t.keymap[48]) {
              t.reset_zoom();
            }
            if (t.keymap[83] || t.keymap[115]) {
              t.deselect_all();
              e = $('.entity')[0];
              if (e) {
                return $(window).trigger('selection', e);
              }
            }
          }
        }
      });
    };

    Netmap.prototype.toggle_add_entity_form = function() {
      var form;

      form = $("#netmap_add_entity");
      $(this.parent_selector).append(form);
      form.css("left", this.mouse_x - $(this.parent_selector).offset().left - 30 + "px");
      form.css("top", this.mouse_y - $(this.parent_selector).offset().top - 60 + "px");
      return form.css("display", form.css("display") === "none" ? "block" : "none");
    };

    Netmap.prototype.toggle_add_related_entities_form = function(entity_id) {
      var entity, form;

      entity = this.entity_by_id(entity_id);
      form = $("#netmap_add_related_entities");
      $(this.parent_selector).append(form);
      $("#netmap_add_related_entities_entity_id").val(entity_id);
      form.css("left", entity.x + this.zoom.translate()[0] + 40 + "px");
      form.css("top", (entity.y + this.zoom.translate()[1] - 30) | 0 + "px");
      return form.css("display", form.css("display") === "none" ? "block" : "none");
    };

    Netmap.prototype.set_data = function(data, center_entity_id) {
      var key, value;

      if (center_entity_id == null) {
        center_entity_id = null;
      }
      this._original_data = {};
      for (key in data) {
        value = data[key];
        this._original_data[key] = value.slice(0);
      }
      this._data = data;
      if (center_entity_id != null) {
        this.set_center_entity_id(center_entity_id);
      }
      this.prepare_entities_and_rels();
      if (!this._data.texts) {
        return this._data['texts'] = [];
      }
    };

    Netmap.prototype.prepare_entities_and_rels = function() {
      var e, entity_index, i, max, min, obj, r, sorted, _i, _j, _len, _len1, _ref, _ref1, _results;

      entity_index = [];
      _ref = this._data.entities;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        entity_index[e.id] = i;
        if (!e.hide_image) {
          e.hide_image = false;
        }
        if (!e.scale) {
          e.scale = 1;
        }
      }
      this.rel_groups = {};
      _ref1 = this._data.rels;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        if (typeof r.x1 === "undefined") {
          r.x1 = null;
          r.y1 = null;
        }
        r.source = this._data.entities[entity_index[r.entity1_id]];
        r.target = this._data.entities[entity_index[r.entity2_id]];
        if (!r.scale) {
          r.scale = 1;
        }
        sorted = [r.entity1_id, r.entity2_id].sort();
        min = sorted[0];
        max = sorted[1];
        if (this.rel_groups[min]) {
          if (this.rel_groups[min][max]) {
            _results.push(this.rel_groups[min][max].push(r.id));
          } else {
            _results.push(this.rel_groups[min][max] = [r.id]);
          }
        } else {
          obj = {};
          obj[max] = [r.id];
          _results.push(this.rel_groups[min] = obj);
        }
      }
      return _results;
    };

    Netmap.prototype.data = function() {
      return this._data;
    };

    Netmap.prototype.entity_ids = function() {
      return this._data.entities.map(function(e) {
        return e.id;
      });
    };

    Netmap.prototype.entities = function() {
      return this._data.entities;
    };

    Netmap.prototype.rel_ids = function() {
      return this._data.rels.map(function(r) {
        return r.id;
      });
    };

    Netmap.prototype.rels = function() {
      return this._data.rels;
    };

    Netmap.prototype.set_user_id = function(user_id) {
      return this.user_id = user_id;
    };

    Netmap.prototype.set_network_map_id = function(id) {
      return this.network_map_id = id;
    };

    Netmap.prototype.get_network_map_id = function() {
      return this.network_map_id;
    };

    Netmap.prototype.save_map = function(callback) {
      if (callback == null) {
        callback = null;
      }
      this.remove_hidden_rels();
      if (this.network_map_id != null) {
        return this.update_map(callback);
      } else {
        return this.create_map(callback);
      }
    };

    Netmap.prototype.api_data_callback = function(callback, redirect) {
      var t;

      if (callback == null) {
        callback = null;
      }
      if (redirect == null) {
        redirect = false;
      }
      t = this;
      return function(data) {
        t.network_map_id = data.id;
        t.set_data(data.data);
        t.build();
        if (callback != null) {
          callback.call(t, data.id);
        }
        if (redirect) {
          return window.location.href = "http://littlesis.org/map/" + t.network_map_id;
        }
      };
    };

    Netmap.prototype.create_map = function(callback) {
      var t;

      if (callback == null) {
        callback = null;
      }
      t = this;
      return this.api.create_map(this.width, this.height, this.user_id, this._data, this.api_data_callback(callback, true));
    };

    Netmap.prototype.load_map = function(id, callback) {
      var t;

      if (callback == null) {
        callback = null;
      }
      this.network_map_id = id;
      t = this;
      return this.api.get_map(id, this.api_data_callback(callback));
    };

    Netmap.prototype.reload_map = function() {
      if (this.network_map_id != null) {
        return this.load_map(this.network_map_id);
      } else {
        this.set_data(this._original_data);
        this.build();
        return this.wheel();
      }
    };

    Netmap.prototype.update_map = function(callback) {
      var t;

      if (callback == null) {
        callback = null;
      }
      if (this.network_map_id == null) {
        return;
      }
      t = this;
      return this.api.update_map(this.network_map_id, this.width, this.height, this._data, this.api_data_callback(callback));
    };

    Netmap.prototype.data_for_save = function() {
      return {
        "width": this.width,
        "height": this.height,
        "zoom": this.zoom.scale(),
        "user_id": this.user_id,
        "data": JSON.stringify(this._data)
      };
    };

    Netmap.prototype.search_entities = function(q, callback) {
      if (callback == null) {
        callback = null;
      }
      return this.api.search_entities(q, callback);
    };

    Netmap.prototype.add_entity = function(id, position) {
      var t;

      if (position == null) {
        position = null;
      }
      if (this.entity_ids().indexOf(parseInt(id)) > -1) {
        return false;
      }
      t = this;
      return this.api.get_add_entity_data(id, this.entity_ids(), function(data) {
        var new_data;

        data.entities = data.entities.map(function(e) {
          e.x = position != null ? position[0] - t.get_translate()[0] : t.width / 2 + 200 * (0.5 - Math.random());
          e.y = position != null ? position[1] - t.get_translate()[1] : t.height / 2 + 200 * (0.5 - Math.random());
          return e;
        });
        new_data = {
          "entities": t.data().entities.concat(data.entities),
          "rels": t.data().rels.concat(data.rels),
          "texts": (t.data().texts ? t.data().texts : [])
        };
        t.set_data(new_data);
        t.build();
        if (t.current_only) {
          return t.limit_to_current();
        }
      });
    };

    Netmap.prototype.add_related_entities = function(entity_id, num, include_cats) {
      var entity, t;

      if (num == null) {
        num = 10;
      }
      if (include_cats == null) {
        include_cats = [];
      }
      entity = this.entity_by_id(entity_id);
      if (entity == null) {
        return false;
      }
      t = this;
      this.api.get_add_related_entities_data(entity_id, num, this.entity_ids(), this.rel_ids(), include_cats, function(data) {
        data.entities = t.circle_entities_around_point(data.entities, [entity.x, entity.y]);
        t.set_data({
          "entities": t.data().entities.concat(data.entities),
          "rels": t.data().rels.concat(data.rels),
          "texts": (t.data().texts ? t.data().texts : [])
        });
        t.build();
        if (t.current_only) {
          return t.limit_to_current();
        }
      });
      return true;
    };

    Netmap.prototype.move_entities_inbounds = function() {
      var e, _i, _len, _ref, _results;

      _ref = this._data.entities;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e.x < 70) {
          e.x = 70;
        }
        if (e.x > this.width) {
          e.x = this.width;
        }
        if (e.y < 50) {
          e.y = 50;
        }
        if (e.y > this.height) {
          _results.push(e.y = this.height);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Netmap.prototype.circle_entities_around_point = function(entities, position, radius) {
      var angle, e, i, _i, _len;

      if (radius == null) {
        radius = 150;
      }
      for (i = _i = 0, _len = entities.length; _i < _len; i = ++_i) {
        e = entities[i];
        angle = i * ((2 * Math.PI) / entities.length);
        e.x = position[0] + radius * Math.cos(angle);
        e.y = position[1] + radius * Math.sin(angle);
      }
      return entities;
    };

    Netmap.prototype.prune = function() {
      var e, _i, _len, _ref;

      this.remove_hidden_rels();
      _ref = this.unconnected_entities();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        this.remove_entity(e.id);
      }
      return this.build();
    };

    Netmap.prototype.show_all_rels = function() {
      var rel, _i, _len, _ref;

      _ref = this._data.rels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rel = _ref[_i];
        delete rel["hidden"];
      }
      this.current_only = false;
      return this.build();
    };

    Netmap.prototype.limit_to_cats = function(cat_ids) {
      var rel, _i, _len, _ref;

      _ref = this._data.rels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rel = _ref[_i];
        if (rel.category_ids != null) {
          if (rel.category_ids.filter(function(id) {
            return cat_ids.indexOf(id) > -1;
          }).length > 0) {
            rel.hidden = false;
          } else {
            rel.hidden = true;
          }
        } else {
          rel.hidden = cat_ids.indexOf(rel.category_id) === -1;
        }
      }
      return this.build();
    };

    Netmap.prototype.limit_to_current = function() {
      var rel, _i, _len, _ref;

      _ref = this._data.rels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rel = _ref[_i];
        if (rel.is_current === 1) {
          rel.hidden = false;
        } else {
          rel.hidden = true;
        }
      }
      this.current_only = true;
      return this.build();
    };

    Netmap.prototype.remove_hidden_rels = function() {
      this._data.rels = this._data.rels.filter(function(r) {
        return !r.hidden;
      });
      return this.build();
    };

    Netmap.prototype.unconnected_entities = function() {
      var connected_ids, r, _i, _len, _ref;

      connected_ids = [];
      _ref = this._data.rels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        connected_ids.push(parseInt(r.entity1_id));
        connected_ids.push(parseInt(r.entity2_id));
      }
      return this._data.entities.filter(function(e) {
        return connected_ids.indexOf(parseInt(e.id)) === -1;
      });
    };

    Netmap.prototype.rel_index = function(id) {
      var i, r, _i, _len, _ref;

      _ref = this._data.rels;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        if (r.id.toString() === id.toString()) {
          return i;
        }
      }
    };

    Netmap.prototype.rel_by_id = function(id) {
      var i, r, _i, _len, _ref;

      _ref = this._data.rels;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        r = _ref[i];
        if (r.id.toString() === id.toString()) {
          return r;
        }
      }
    };

    Netmap.prototype.remove_rel = function(id) {
      return this._data.rels.splice(this.rel_index(id), 1);
    };

    Netmap.prototype.entity_index = function(id) {
      var e, i, _i, _len, _ref;

      _ref = this._data.entities;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        if (e.id.toString() === id.toString()) {
          return i;
        }
      }
    };

    Netmap.prototype.entity_by_id = function(id) {
      var e, i, _i, _len, _ref;

      _ref = this._data.entities;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        if (e.id.toString() === id.toString()) {
          return e;
        }
      }
      return null;
    };

    Netmap.prototype.remove_entity = function(id) {
      this._data.entities.splice(this.entity_index(id), 1);
      return this.remove_orphaned_rels();
    };

    Netmap.prototype.rels_by_entity = function(id) {
      return this._data.rels.filter(function(r) {
        return r.entity1_id.toString() === id.toString() || r.entity2_id.toString() === id.toString();
      });
    };

    Netmap.prototype.rel_curve_ratio = function(rel) {
      var i, max, min, n, rels, sorted;

      sorted = [rel.entity1_id, rel.entity2_id].sort();
      min = sorted[0];
      max = sorted[1];
      rels = this.rel_groups[min][max];
      n = rels.length;
      if (n === 1) {
        return 0.5;
      } else {
        i = rels.indexOf(rel.id);
        return 0.7 * (i + 1) / n;
      }
    };

    Netmap.prototype.set_center_entity_id = function(id) {
      var entity, _i, _len, _ref, _results;

      this.center_entity_id = id;
      _ref = this._data["entities"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.id === this.center_entity_id) {
          entity.fixed = true;
          entity.x = this.width / 2;
          _results.push(entity.y = this.height / 2);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Netmap.prototype.wheel = function(center_entity_id) {
      var angle, center_x, center_y, count, entity, i, _i, _len, _ref;

      if (center_entity_id == null) {
        center_entity_id = null;
      }
      if (this.center_entity_id != null) {
        center_entity_id = this.center_entity_id;
      }
      if (center_entity_id != null) {
        return this.halfwheel(center_entity_id);
      }
      count = 0;
      center_x = this.width / 2 - this.zoom.translate()[0];
      center_y = this.height / 2 - this.zoom.translate()[1];
      _ref = this._data["entities"];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        entity = _ref[i];
        if (parseInt(entity.id) === center_entity_id) {
          this._data["entities"][i].x = center_x;
          this._data["entities"][i].y = center_y;
        } else {
          angle = (2 * Math.PI / (this._data["entities"].length - (center_entity_id != null ? 1 : 0))) * count;
          this._data["entities"][i].x = center_x + this.distance * Math.cos(angle);
          this._data["entities"][i].y = center_y + this.distance * Math.sin(angle);
          count++;
        }
      }
      return this.update_positions();
    };

    Netmap.prototype.halfwheel = function(center_entity_id) {
      var angle, count, entity, i, range, _i, _len, _ref;

      if (center_entity_id == null) {
        center_entity_id = null;
      }
      if (this.center_entity_id != null) {
        center_entity_id = this.center_entity_id;
      }
      if (center_entity_id == null) {
        return;
      }
      if (this._data["entities"].length < 3) {
        return this.one_time_force();
      }
      count = 0;
      _ref = this._data["entities"];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        entity = _ref[i];
        if (parseInt(entity.id) === center_entity_id) {
          this._data["entities"][i].x = this.width / 2;
          this._data["entities"][i].y = 80;
        } else {
          range = Math.PI * 2 / 3;
          angle = Math.PI + (Math.PI / (this._data["entities"].length - 2)) * count;
          this._data["entities"][i].x = 70 + (this.width - 140) / 2 + ((this.width - 140) / 2) * Math.cos(angle);
          this._data["entities"][i].y = 80 - ((this.width - 140) / 2) * Math.sin(angle);
          count++;
        }
      }
      return this.update_positions();
    };

    Netmap.prototype.grid = function() {
      var area, i, j, k, num, per, radius, x_num, y_num, _i, _j, _ref, _ref1;

      num = this._data.entities.length;
      area = this.width * this.height;
      per = (area / num) * 0.7;
      radius = Math.floor(Math.sqrt(per));
      x_num = Math.ceil(this.width / (radius * 1.25));
      y_num = Math.ceil(this.height / (radius * 1.25));
      for (i = _i = 0, _ref = x_num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = y_num - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          k = x_num * j + i;
          if (this._data.entities[k] != null) {
            this._data.entities[k].x = i * radius + 70 + (50 - 50 * Math.random());
            this._data.entities[k].y = j * radius + 30 + (50 - 50 * Math.random());
          }
        }
      }
      return this.update_positions();
    };

    Netmap.prototype.interlocks = function(degree0_id, degree1_ids, degree2_ids) {
      var angle, d0, d1, d2, i, id, radius, range, _i, _j, _len, _len1;

      d0 = this.entity_by_id(degree0_id);
      d0.x = this.width / 2;
      d0.y = 30;
      for (i = _i = 0, _len = degree1_ids.length; _i < _len; i = ++_i) {
        id = degree1_ids[i];
        range = Math.PI * 1 / 2;
        if (degree1_ids.length > 1) {
          angle = (Math.PI * 3 / 2) + i * (range / (degree1_ids.length - 1)) - range / 2;
        } else {
          angle = 0;
        }
        radius = (this.width - 100) / 2;
        d1 = this.entity_by_id(id);
        if (degree1_ids.length > 1) {
          d1.x = 70 + i * (this.width - 140) / (degree1_ids.length - 1);
          d1.y = this.height / 2 + 250 + radius * Math.sin(angle);
        } else {
          d1.x = 70 + (this.width - 140) / 2;
          d1.y = this.height / 2 - 50;
        }
      }
      for (i = _j = 0, _len1 = degree2_ids.length; _j < _len1; i = ++_j) {
        id = degree2_ids[i];
        range = Math.PI * 1 / 3;
        angle = (Math.PI * 3 / 2) + i * (range / (degree2_ids.length - 1)) - range / 2;
        radius = (this.width - 100) / 2;
        d2 = this.entity_by_id(id);
        d2.x = 70 + i * (this.width - 140) / (degree2_ids.length - 1);
        d2.y = this.height - 480 - radius * Math.sin(angle);
      }
      return this.update_positions();
    };

    Netmap.prototype.shuffle_array = function(array) {
      var counter, index, temp;

      counter = array.length;
      while (counter--) {
        index = (Math.random() * counter) | 0;
        temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
      }
      return array;
    };

    Netmap.prototype.shuffle = function() {
      var i, p, positions, _i, _len;

      positions = this.entities().map(function(e) {
        return [e.x, e.y];
      });
      positions = this.shuffle_array(positions);
      for (i = _i = 0, _len = positions.length; _i < _len; i = ++_i) {
        p = positions[i];
        this.entities()[i].x = p[0];
        this.entities()[i].y = p[1];
      }
      return this.update_positions();
    };

    Netmap.prototype.has_positions = function() {
      var e, r, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this._data.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (!((e.x != null) && (e.y != null))) {
          return false;
        }
      }
      _ref1 = this._data.rels;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        if (!((r.source.x != null) && (r.source.y != null) && (r.target.x != null) && (r.target.y != null))) {
          return false;
        }
      }
      return true;
    };

    Netmap.prototype.update_positions = function() {
      var t;

      t = this;
      d3.selectAll(".entity").attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
      d3.selectAll(".rel").attr("transform", function(d) {
        return "translate(" + (d.source.x + d.target.x) / 2 + "," + (d.source.y + d.target.y) / 2 + ")";
      });
      d3.selectAll(".line").attr("d", function(d) {
        var ax, ay, dr, dx, dxm1, dxm2, dy, dym1, dym2, m, n, node_radius1, node_radius2, q, rm1, rm2, spacing, x1, xa, xb, xm1, xm2, y1, ya, yb, ym1, ym2;

        dx = d.target.x - d.source.x;
        dy = d.target.y - d.source.y;
        dr = Math.sqrt(dx * dx + dy * dy);
        ax = (d.source.x + d.target.x) / 2;
        ay = (d.source.y + d.target.y) / 2;
        if (d.source.x < d.target.x) {
          xa = d.source.x - ax;
          ya = d.source.y - ay;
        } else {
          xa = d.target.x - ax;
          ya = d.target.y - ay;
        }
        xb = -xa;
        yb = -ya;
        x1 = d.x1;
        y1 = d.y1;
        n = t.rel_curve_ratio(d);
        if (d.x1 === null) {
          x1 = -ya * n;
          y1 = xa * n;
        }
        spacing = 5;
        node_radius1 = (25 * (d.source.x >= d.target.x ? d.target.scale : d.source.scale)) + spacing;
        node_radius2 = (25 * (d.source.x < d.target.x ? d.target.scale : d.source.scale)) + spacing;
        dxm1 = xa - x1;
        dym1 = ya - y1;
        rm1 = Math.sqrt(dxm1 * dxm1 + dym1 * dym1);
        dxm2 = xb - x1;
        dym2 = yb - y1;
        rm2 = Math.sqrt(dxm2 * dxm2 + dym2 * dym2);
        xm1 = node_radius1 * dxm1 / rm1;
        ym1 = node_radius1 * dym1 / rm1;
        xm2 = node_radius2 * dxm2 / rm2;
        ym2 = node_radius2 * dym2 / rm2;
        m = "M" + (xa - xm1) + "," + (ya - ym1);
        q = "Q" + x1 + "," + y1 + "," + (xb - xm2) + "," + (yb - ym2);
        return m + q;
      });
      d3.selectAll('.text text').attr('x', function(d) {
        return d.x;
      }).attr('y', function(d) {
        return d.y;
      });
      return this.update_rel_is_directionals();
    };

    Netmap.prototype.use_force = function() {
      var e, i, j, r, t, _i, _j, _len, _len1, _ref, _ref1;

      _ref = this._data.entities;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        e = _ref[i];
        delete this._data.entities[i]["fixed"];
      }
      _ref1 = this._data.rels;
      for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
        r = _ref1[j];
        this._data.rels[j]["x1"] = null;
        this._data.rels[j]["y1"] = null;
      }
      this.force_enabled = true;
      this.force = d3.layout.force().gravity(.3).distance(this.distance).charge(-5000).friction(0.7).size([0, 0]).nodes(this._data.entities, function(d) {
        return d.id;
      }).links(this._data.rels, function(d) {
        return d.id;
      }).start();
      t = this;
      this.force.on("tick", function() {
        return t.update_positions();
      });
      if ((this.alpha != null) && this.alpha > 0) {
        return this.force.alpha(this.alpha);
      }
    };

    Netmap.prototype.one_time_force = function() {
      var t;

      if (this.force_enabled) {
        this.deny_force();
      }
      this.use_force();
      this.force.alpha(0.3);
      t = this;
      return this.force.on("end", function() {
        return t.force_enabled = false;
      });
    };

    Netmap.prototype.deny_force = function() {
      this.force_enabled = false;
      this.alpha = this.force.alpha();
      return this.force.stop();
    };

    Netmap.prototype.n_force_ticks = function(n) {
      var _i;

      this.use_force();
      for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
        this.force.tick();
      }
      return this.deny_force();
    };

    Netmap.prototype.build = function() {
      this.build_rels();
      this.build_entities();
      this.build_texts();
      this.entities_on_top();
      if (this.has_positions()) {
        return this.update_positions();
      }
    };

    Netmap.prototype.remove_orphaned_rels = function() {
      var entity_ids, i, id, rel, rel_ids, _i, _len, _results;

      entity_ids = this._data.entities.map(function(e) {
        return e.id;
      });
      rel_ids = (function() {
        var _i, _len, _ref, _results;

        _ref = this._data.rels;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          rel = _ref[i];
          if (entity_ids.indexOf(rel.entity1_id) === -1 || entity_ids.indexOf(rel.entity2_id) === -1) {
            _results.push(rel.id);
          }
        }
        return _results;
      }).call(this);
      _results = [];
      for (_i = 0, _len = rel_ids.length; _i < _len; _i++) {
        id = rel_ids[_i];
        _results.push(this.remove_rel(id));
      }
      return _results;
    };

    Netmap.prototype.build_rels = function() {
      var groups, rel_drag, rels, t, zoom;

      t = this;
      zoom = d3.select("#zoom");
      rels = zoom.selectAll(".rel").data(this._data["rels"], function(d) {
        return d.id;
      });
      rel_drag = d3.behavior.drag().on("dragstart", function(d, i) {
        if (t.force_enabled) {
          t.alpha = t.force.alpha();
        }
        if (t.force_enabled) {
          t.force.stop();
        }
        t.drag = false;
        d3.event.sourceEvent.preventDefault();
        return d3.event.sourceEvent.stopPropagation();
      }).on("drag", function(d, i) {
        d.x1 += d3.event.dx;
        d.y1 += d3.event.dy;
        t.update_positions();
        return t.drag = true;
      }).on("dragend", function(d, i) {
        d.fixed = true;
        if (t.force_enabled) {
          return t.force.alpha(t.alpha);
        }
      });
      groups = rels.enter().append("g").attr("class", "rel").attr("id", function(d) {
        return "rel-" + d.id;
      }).call(rel_drag);
      rels.exit().remove();
      this.build_rel_paths();
      this.update_rel_is_currents();
      rels.style("display", function(d) {
        if (d.hidden === true) {
          return "none";
        } else {
          return null;
        }
      });
      this.svg.selectAll(".rel .line").data(this._data["rels"], function(d) {
        return d.id;
      });
      this.svg.selectAll(".rel a").data(this._data["rels"], function(d) {
        return d.id;
      });
      this.svg.selectAll(".rel text").data(this._data["rels"], function(d) {
        return d.id;
      });
      this.svg.selectAll(".rel textpath").data(this._data["rels"], function(d) {
        return d.id;
      });
      return this.svg.selectAll(".rel").on("click", function(d, i) {
        $(this).insertAfter($('.rel').last());
        if (!t.drag) {
          t.toggle_selected_rel(d.id);
        }
        return $(window).trigger('selection', this);
      });
    };

    Netmap.prototype.build_rel_paths = function() {
      var groups, t;

      t = this;
      groups = this.svg.selectAll('g.rel');
      $('.rel path.line').remove();
      $('.rel a').remove();
      $('.rel text.label').remove();
      $('.rel .labelpath').remove();
      groups.append("path").attr("id", function(d) {
        return "path-bg-" + d.id;
      }).attr("class", "line bg").attr("opacity", 0).attr("stroke", "white").attr("stroke-width", 20);
      groups.append("path").attr("id", function(d) {
        return "path-highlight-" + d.id;
      }).attr("class", "line highlight").attr("opacity", 0.6).attr("fill", "none").style("stroke-width", function(d) {
        return 4 * d.scale;
      });
      groups.append("path").attr("id", function(d) {
        return "path-" + d.id;
      }).attr("class", "line").attr("opacity", 0.6).attr("fill", "none").attr("stroke", function(d) {
        if (d.color) {
          return d.color;
        } else {
          return '#000';
        }
      }).style("stroke-width", function(d) {
        return d.scale;
      });
      return groups.append("a").attr("xlink:href", function(d) {
        return d.url;
      }).append("text").attr("class", "label").attr("dy", function(d) {
        return -6 * Math.sqrt(d.scale);
      }).attr("text-anchor", "middle").append("textPath").attr("class", "labelpath").attr("startOffset", "50%").attr("xlink:href", function(d) {
        return "#path-" + d.id;
      }).attr("font-size", function(d) {
        return 9 * Math.sqrt(d.scale);
      }).text(function(d) {
        return d.label;
      });
    };

    Netmap.prototype.toggle_selected_rel = function(id, value) {
      var rel, t;

      if (value == null) {
        value = null;
      }
      t = this;
      rel = d3.select("#rel-" + id + ".rel");
      return rel.classed("selected", function(d, i) {
        if (value === true || value === false) {
          t.deselect_all();
          return value;
        } else {
          value = !rel.classed("selected");
          t.deselect_all();
          return value;
        }
      });
    };

    Netmap.prototype.toggle_hovered_rel = function(id, value) {
      var rel;

      if (value == null) {
        value = null;
      }
      rel = d3.select("#rel-" + id + ".rel");
      return rel.classed("hovered", value);
    };

    Netmap.prototype.has_image = function(d) {
      return !d.hide_image && d.image && d.image.indexOf("netmap") === -1;
    };

    Netmap.prototype.build_entities = function() {
      var entities, entity_drag, groups, t, zoom;

      t = this;
      zoom = d3.selectAll("#zoom");
      entity_drag = d3.behavior.drag().on("dragstart", function(d, i) {
        if (t.force_enabled) {
          t.alpha = t.force.alpha();
        }
        if (t.force_enabled) {
          t.force.stop();
        }
        t.drag = false;
        d3.event.sourceEvent.preventDefault();
        return d3.event.sourceEvent.stopPropagation();
      }).on("drag", function(d, i) {
        d.x += d3.event.dx;
        d.y += d3.event.dy;
        t.update_positions();
        return t.drag = true;
      }).on("dragend", function(d, i) {
        if (t.is_ie()) {
          t.update_positions();
        }
        d.fixed = true;
        if (t.force_enabled) {
          return t.force.alpha(t.alpha);
        }
      });
      entities = zoom.selectAll(".entity").data(this._data["entities"], function(d) {
        return d.id;
      });
      groups = entities.enter().append("g").attr("class", "entity").attr("id", function(d) {
        return 'entity-' + d.id;
      }).call(entity_drag).on("mouseover", function(d) {
        var r, _i, _len, _ref, _results;

        _ref = t.rels_by_entity(d.id);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(t.toggle_hovered_rel(r.id, true));
        }
        return _results;
      }).on("mouseout", function(d) {
        var r, _i, _len, _ref, _results;

        _ref = t.rels_by_entity(d.id);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(t.toggle_hovered_rel(r.id, false));
        }
        return _results;
      });
      entities.exit().remove();
      this.build_entity_images();
      this.build_entity_labels();
      this.svg.selectAll(".entity").on("click", function(d, i) {
        $('#zoom').append(this);
        if (!t.drag) {
          t.toggle_selected_entity(d.id);
        }
        if (!t.drag) {
          return $(window).trigger('selection', this);
        }
      });
      return this.svg.selectAll(".entity a").on("click", function(d, i) {
        return d3.event.stopPropagation();
      });
    };

    Netmap.prototype.build_entity_images = function() {
      var groups, t;

      t = this;
      groups = this.svg.selectAll('g.entity');
      $('.entity circle.image-bg').remove();
      $('.entity .image-clippath').remove();
      $('.entity image.image').remove();
      groups.append("circle").attr("class", function(d) {
        if (d.image) {
          return "image-bg";
        } else {
          return "image-bg custom";
        }
      }).attr("opacity", 1).attr("r", function(d) {
        return 25 * d.scale;
      }).attr("x", function(d) {
        return -29 * d.scale;
      }).attr("y", function(d) {
        return -29 * d.scale;
      }).attr("stroke", "white").attr("stroke-width", function(d) {
        return 7 * d.scale;
      }).attr("stroke-opacity", 0);
      groups.append("clipPath").attr("id", function(d) {
        return "image-clip-" + d.id;
      }).attr("class", "image-clippath").append("circle").attr("class", "image-clip").attr("opacity", 1).attr("r", function(d) {
        return 25 * d.scale;
      }).attr("x", function(d) {
        return -29 * d.scale;
      }).attr("y", function(d) {
        return -29 * d.scale;
      });
      return groups.filter(function(d) {
        return d.image;
      }).append("image").attr("class", "image").attr("xlink:href", function(d) {
        return t.image_for_entity(d);
      }).attr("x", function(d) {
        if (t.has_image(d)) {
          return -40 * d.scale;
        } else {
          return -25 * d.scale;
        }
      }).attr("y", function(d) {
        if (t.has_image(d)) {
          return -40 * d.scale;
        } else {
          return -25 * d.scale;
        }
      }).attr("width", function(d) {
        if (t.has_image(d)) {
          return 80 * d.scale;
        } else {
          return 50 * d.scale;
        }
      }).attr("height", function(d) {
        if (t.has_image(d)) {
          return 80 * d.scale;
        } else {
          return 50 * d.scale;
        }
      }).attr("clip-path", function(d) {
        return "url(#image-clip-" + d.id + ")";
      });
    };

    Netmap.prototype.build_entity_labels = function() {
      var groups, links, t;

      t = this;
      groups = this.svg.selectAll('g.entity');
      $('.entity a.entity_link').remove();
      $('.entity rect.text_rect').remove();
      links = groups.append("a").attr("class", "entity_link").attr("xlink:href", function(d) {
        return d.url;
      }).attr("title", function(d) {
        return d.description;
      });
      links.append("text").attr("class", "entitylabel1").attr("dx", 0).attr("dy", function(d) {
        return 42 * d.scale;
      }).attr("text-anchor", "middle").attr("font-size", function(d) {
        return 12 * d.scale;
      }).text(function(d) {
        return t.split_name(d.name)[0];
      });
      links.append("text").attr("class", "entitylabel2").attr("dx", 0).attr("dy", function(d) {
        return 59 * d.scale;
      }).attr("text-anchor", "middle").attr("font-size", function(d) {
        return 12 * d.scale;
      }).text(function(d) {
        return t.split_name(d.name)[1];
      });
      groups.filter(function(d) {
        return t.split_name(d.name)[0] !== d.name;
      }).insert("rect", ":first-child").attr("class", "text_rect").attr("fill", this.entity_background_color).attr("opacity", this.entity_background_opacity).attr("rx", this.entity_background_corner_radius).attr("ry", this.entity_background_corner_radius).attr("x", function(d) {
        return -$(this.parentNode).find(".entity_link text:nth-child(2)")[0].getBBox().width / 2 - 3;
      }).attr("y", function(d) {
        var extra_offset, image_offset, text_offset;

        image_offset = 28;
        text_offset = $(this.parentNode).find(".entity_link text")[0].getBBox().height;
        extra_offset = 5;
        return (image_offset + extra_offset) * d.scale + text_offset;
      }).attr("width", function(d) {
        return $(this.parentNode).find(".entity_link text:nth-child(2)")[0].getBBox().width + 6;
      }).attr("height", function(d) {
        return $(this.parentNode).find(".entity_link text:nth-child(2)")[0].getBBox().height + 4;
      });
      return groups.insert("rect", ":first-child").attr("class", "text_rect").attr("fill", this.entity_background_color).attr("opacity", this.entity_background_opacity).attr("rx", this.entity_background_corner_radius).attr("ry", this.entity_background_corner_radius).attr("x", function(d) {
        return -$(this.parentNode).find(".entity_link text")[0].getBBox().width / 2 - 3;
      }).attr("y", function(d) {
        var extra_offset, image_offset;

        image_offset = 28;
        extra_offset = 1;
        return (image_offset + extra_offset) * d.scale;
      }).attr("width", function(d) {
        return $(this.parentNode).find(".entity_link text")[0].getBBox().width + 6;
      }).attr("height", function(d) {
        return $(this.parentNode).find(".entity_link text")[0].getBBox().height + 4;
      });
    };

    Netmap.prototype.last_entity_id = function() {
      var elem, elems;

      elems = document.querySelectorAll('#zoom g.entity');
      elem = elems[elems.length - 1];
      if (!elem) {
        return null;
      }
      return elem.id;
    };

    Netmap.prototype.toggle_selected_entity = function(id) {
      var g, klass;

      g = $("#entity-" + id + ".entity");
      klass = g.attr("class") === "entity" ? "entity selected" : "entity";
      this.deselect_all();
      return g.attr("class", klass);
    };

    Netmap.prototype.entities_on_top = function() {
      var zoom;

      zoom = $("#zoom");
      $("g.rel").each(function(i, g) {
        return $(g).prependTo(zoom);
      });
      return $("#bg").prependTo(zoom);
    };

    Netmap.prototype.split_name = function(name, min_length) {
      var half, i, parts;

      if (min_length == null) {
        min_length = 16;
      }
      if (name == null) {
        return ["", ""];
      }
      name = name.trim();
      if (name.length < min_length) {
        return [name, ""];
      }
      i = name.indexOf(" ", Math.floor(name.length * 1 / 2));
      if (i > -1 && i <= Math.floor(name.length * 2 / 3)) {
        return [name.substring(0, i), name.substring(i + 1)];
      } else {
        i = name.lastIndexOf(" ", Math.ceil(name.length / 2));
        if (i >= Math.floor(name.lenth * 1 / 3)) {
          return [name.substring(0, i), name.substring(i + 1)];
        }
      }
      parts = name.split(/\s+/);
      half = Math.ceil(parts.length / 2);
      return [parts.slice(0, half).join(" "), parts.slice(half).join(" ")];
    };

    Netmap.prototype.rel_is_directional = function(r) {
      if (r.is_directional === true) {
        return true;
      }
      if (r.is_directional === false) {
        return false;
      }
      return r.category_ids.map(function(cat_id) {
        return [1, 2, 3, 5, 10].indexOf(cat_id);
      }).indexOf(-1) === -1;
    };

    Netmap.prototype.centered_coordinates = function() {
      var center;

      if (this.entities().length === 0) {
        return true;
      }
      center = this.compute_graph_center();
      return center.x < 200 && center.y < 200;
    };

    Netmap.prototype.update_rel_labels = function() {
      return this.svg.selectAll(".labelpath").text(function(d) {
        return d.label;
      });
    };

    Netmap.prototype.update_rel_is_currents = function() {
      return d3.selectAll(".line:not(.highlight):not(.bg)").style("stroke-dasharray", function(d) {
        if (d.is_current === 0 || d.is_current === null || d.end_date) {
          return "5,2";
        } else {
          return "";
        }
      });
    };

    Netmap.prototype.update_rel_is_directionals = function() {
      var t;

      t = this;
      if (this.is_ie()) {
        d3.selectAll(".line:not(.highlight)").each(function() {
          return this.parentNode.insertBefore(this, this);
        });
      }
      return d3.selectAll(".line:not(.highlight)").attr("marker-end", function(d) {
        if (t.rel_is_directional(d) && d.source.x < d.target.x) {
          return "url(#marker1)";
        } else {
          return "";
        }
      }).attr("marker-start", function(d) {
        if (t.rel_is_directional(d) && d.source.x >= d.target.x) {
          return "url(#marker2)";
        } else {
          return "";
        }
      });
    };

    Netmap.prototype.set_rel_label = function(id, label) {
      var rel;

      rel = this.rel_by_id(id);
      if (rel) {
        rel.label = label;
        return this.update_rel_labels();
      } else {
        return false;
      }
    };

    Netmap.prototype.set_rel_is_current = function(id, value) {
      var rel;

      rel = this.rel_by_id(id);
      if (rel) {
        rel.is_current = value;
        return this.update_rel_is_currents();
      } else {
        return false;
      }
    };

    Netmap.prototype.set_rel_is_directional = function(id, value) {
      var rel;

      rel = this.rel_by_id(id);
      if (rel) {
        rel.is_directional = value;
        return this.update_rel_is_directionals();
      } else {
        return false;
      }
    };

    Netmap.prototype.set_rel_scale = function(id, value) {
      var rel;

      rel = this.rel_by_id(id);
      if (rel) {
        rel.scale = value;
        this.build_rels();
        return this.update_positions();
      } else {
        return false;
      }
    };

    Netmap.prototype.selected_rel_id = function() {
      var data;

      data = d3.selectAll($(".rel.selected")).data();
      if (data.length !== 1) {
        return false;
      }
      return data[0].id;
    };

    Netmap.prototype.get_selected_rel_label = function() {
      return this.rel_by_id(this.selected_rel_id()).label;
    };

    Netmap.prototype.set_selected_rel_label = function(label) {
      return this.set_rel_label(this.selected_rel_id(), label);
    };

    Netmap.prototype.selected_rel_is_current = function() {
      return !!this.rel_by_id(this.selected_rel_id()).is_current;
    };

    Netmap.prototype.set_selected_rel_is_current = function(value) {
      return this.set_rel_is_current(this.selected_rel_id(), value);
    };

    Netmap.prototype.selected_rel_is_directional = function() {
      return this.rel_is_directional(this.rel_by_id(this.selected_rel_id()));
    };

    Netmap.prototype.set_selected_rel_is_directional = function(value) {
      return this.set_rel_is_directional(this.selected_rel_id(), value);
    };

    Netmap.prototype.get_selected_rel_scale = function() {
      return this.rel_by_id(this.selected_rel_id()).scale;
    };

    Netmap.prototype.set_selected_rel_scale = function(value) {
      return this.set_rel_scale(this.selected_rel_id(), value);
    };

    Netmap.prototype.update_entity_labels = function() {
      var t;

      t = this;
      this.svg.selectAll(".entitylabel1").text(function(d) {
        return t.split_name(d.name)[0];
      });
      return this.svg.selectAll(".entitylabel2").text(function(d) {
        return t.split_name(d.name)[1];
      });
    };

    Netmap.prototype.update_entity_images = function() {
      var t;

      t = this;
      return this.svg.selectAll('.image').attr("xlink:href", function(d) {
        return t.image_for_entity(d);
      }).attr("x", function(d) {
        if (t.has_image(d)) {
          return -40 * d.scale;
        } else {
          return -25 * d.scale;
        }
      }).attr("y", function(d) {
        if (t.has_image(d)) {
          return -40 * d.scale;
        } else {
          return -25 * d.scale;
        }
      }).attr("width", function(d) {
        if (t.has_image(d)) {
          return 80 * d.scale;
        } else {
          return 50 * d.scale;
        }
      }).attr("height", function(d) {
        if (t.has_image(d)) {
          return 80 * d.scale;
        } else {
          return 50 * d.scale;
        }
      });
    };

    Netmap.prototype.set_entity_label = function(id, label) {
      var entity;

      entity = this.entity_by_id(id);
      if (entity != null) {
        entity.name = label;
        return this.build_entity_labels();
      } else {
        return false;
      }
    };

    Netmap.prototype.set_entity_hide_image = function(id, value) {
      var entity;

      entity = this.entity_by_id(id);
      if (entity) {
        entity.hide_image = value;
        return this.update_entity_images();
      } else {
        return false;
      }
    };

    Netmap.prototype.set_entity_scale = function(id, value) {
      var entity;

      entity = this.entity_by_id(id);
      if (entity) {
        entity.scale = value;
        this.build();
        return d3.selectAll(".entity image").each(function() {
          return this.parentNode.insertBefore(this, this);
        });
      } else {
        return false;
      }
    };

    Netmap.prototype.selected_entity_id = function() {
      var data;

      data = d3.selectAll($(".entity.selected")).data();
      if (data.length !== 1) {
        return false;
      }
      return data[0].id;
    };

    Netmap.prototype.get_selected_entity = function() {
      return this.entity_by_id(this.selected_entity_id());
    };

    Netmap.prototype.get_selected_entity_label = function() {
      return this.get_selected_entity().name;
    };

    Netmap.prototype.get_selected_entity_scale = function() {
      return this.get_selected_entity().scale;
    };

    Netmap.prototype.set_selected_entity_label = function(label) {
      return this.set_entity_label(this.selected_entity_id(), label);
    };

    Netmap.prototype.set_selected_entity_hide_image = function(value) {
      return this.set_entity_hide_image(this.selected_entity_id(), value);
    };

    Netmap.prototype.set_selected_entity_scale = function(value) {
      return this.set_entity_scale(this.selected_entity_id(), value);
    };

    Netmap.prototype.selected_text_id = function() {
      var data;

      data = d3.selectAll($(".text.selected")).data();
      if (data.length !== 1) {
        return false;
      }
      return data[0].id;
    };

    Netmap.prototype.get_selected_text_content = function() {
      var i;

      i = this.selected_text_id();
      if (i === false) {
        return false;
      }
      return this.text_by_id(i).text;
    };

    Netmap.prototype.set_selected_text_content = function(content) {
      return this.set_text_content(this.selected_text_id(), content);
    };

    Netmap.prototype.set_text_content = function(id, content) {
      var text;

      text = this.text_by_id(id);
      if (text != null) {
        text.text = content;
        return this.update_text_contents();
      } else {
        return false;
      }
    };

    Netmap.prototype.update_text_contents = function() {
      return this.svg.selectAll(".text text").text(function(d) {
        return d.text;
      });
    };

    Netmap.prototype.deselect_all = function() {
      return this.svg.selectAll('.selected').classed('selected', false);
    };

    Netmap.prototype.build_texts = function() {
      var groups, t, text_drag, texts, zoom;

      t = this;
      zoom = d3.selectAll("#zoom");
      texts = zoom.selectAll(".text").data(this._data["texts"], function(d) {
        return d.id;
      });
      text_drag = d3.behavior.drag().on("dragstart", function(d, i) {
        t.drag = false;
        d3.event.sourceEvent.preventDefault();
        return d3.event.sourceEvent.stopPropagation();
      }).on("drag", function(d, i) {
        d.x += d3.event.dx;
        d.y += d3.event.dy;
        t.update_positions();
        return t.drag = true;
      });
      groups = texts.enter().append("g").attr('id', function(d, i) {
        return 'text-' + d.id;
      }).attr("class", "text").call(text_drag);
      groups.append("text").attr('fill', '#888').attr('x', function(d) {
        return d.x;
      }).attr('y', function(d) {
        return d.y;
      }).text(function(d) {
        return d.text;
      });
      this.svg.selectAll(".text").on("click", function(d, i) {
        if (!t.drag) {
          t.toggle_selected_text(d.id);
        }
        if (!t.drag) {
          return $(window).trigger('selection', this);
        }
      });
      return texts.exit().remove();
    };

    Netmap.prototype.add_text = function(text, x, y) {
      this._data["texts"].push({
        'text': text,
        'x': x,
        'y': y,
        id: this.next_text_id()
      });
      return this.build_texts();
    };

    Netmap.prototype.next_text_id = function() {
      var ids;

      ids = this.data().texts.map(function(t) {
        return t.id;
      });
      return Math.max(ids) + 1;
    };

    Netmap.prototype.toggle_selected_text = function(id) {
      var g, klass;

      g = $("#text-" + id);
      klass = g.attr("class") === "text" ? "text selected" : "text";
      this.deselect_all();
      return g.attr("class", klass);
    };

    Netmap.prototype.text_index = function(id) {
      var i, t, _i, _len, _ref;

      _ref = this.data().texts;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        t = _ref[i];
        if (parseInt(t.id) === parseInt(id)) {
          return i;
        }
      }
    };

    Netmap.prototype.text_by_id = function(id) {
      var i, t, _i, _len, _ref;

      _ref = this.data().texts;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        t = _ref[i];
        if (parseInt(t.id) === parseInt(id)) {
          return t;
        }
      }
    };

    Netmap.prototype.remove_text = function(id) {
      return this._data.texts.splice(this.text_index(id), 1);
    };

    Netmap.prototype.image_for_entity = function(e) {
      if (e.hide_image) {
        if (e.type === 'Person') {
          return 'http://littlesis.s3.amazonaws.com/images/system/netmap-person.png';
        } else if (e.type === 'Org') {
          return 'http://littlesis.s3.amazonaws.com/images/system/netmap-org.png';
        } else {
          return null;
        }
      } else {
        return e.image;
      }
    };

    Netmap.prototype.next_custom_node_id = function() {
      var ids, max, nums;

      ids = this.data().entities.map(function(e) {
        return e.id.toString();
      }).filter(function(id) {
        return id.indexOf("x") === 0;
      });
      if (ids.length === 0) {
        return "x1";
      }
      nums = ids.map(function(id) {
        return parseInt(id.slice(1));
      });
      max = Math.max.apply(null, nums);
      return "x" + (max + 1);
    };

    Netmap.prototype.next_custom_rel_id = function() {
      var ids, max, nums;

      ids = this.data().rels.map(function(r) {
        return r.id.toString();
      }).filter(function(id) {
        return id.indexOf("x") === 0;
      });
      if (ids.length === 0) {
        return "x1";
      }
      nums = ids.map(function(id) {
        return parseInt(id.slice(1));
      });
      max = Math.max.apply(null, nums);
      return "x" + (max + 1);
    };

    Netmap.prototype.add_node = function(name, x, y, type, url) {
      if (type == null) {
        type = null;
      }
      if (url == null) {
        url = null;
      }
      this.data().entities.push({
        id: this.next_custom_node_id(),
        name: name,
        x: x,
        y: y,
        type: type,
        url: url,
        image: null,
        hide_image: true,
        custom: true
      });
      return this.build();
    };

    Netmap.prototype.add_edge = function(entity1_id, entity2_id, label, category_id, is_current, is_directional, url) {
      if (category_id == null) {
        category_id = null;
      }
      if (is_current == null) {
        is_current = 1;
      }
      if (is_directional == null) {
        is_directional = false;
      }
      if (url == null) {
        url = null;
      }
      if (entity1_id.toString().match(/^\d+$/)) {
        entity1_id = parseInt(entity1_id);
      }
      if (entity2_id.toString().match(/^\d+$/)) {
        entity2_id = parseInt(entity2_id);
      }
      if (!category_id) {
        category_id = null;
      }
      this.data().rels.push({
        id: this.next_custom_rel_id(),
        entity1_id: entity1_id,
        entity2_id: entity2_id,
        entity2_id: entity2_id,
        label: label,
        category_id: category_id,
        category_ids: (category_id ? [category_id] : []),
        is_current: parseInt(is_current),
        end_date: null,
        value: 1,
        url: url,
        custom: true,
        is_directional: is_directional
      });
      this.prepare_entities_and_rels();
      return this.build();
    };

    Netmap.prototype.entity_options_for_select = function() {
      return this.data().entities.map(function(e) {
        return [e.id, e.name];
      });
    };

    Netmap.prototype.is_ie = function() {
      return window.navigator.userAgent.indexOf("MSIE") !== -1 || window.navigator.userAgent.indexOf("Trident") !== -1;
    };

    return Netmap;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.Netmap = Netmap;
  } else {
    window.Netmap = Netmap;
  }

}).call(this);
